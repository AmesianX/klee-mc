#!/usr/bin/env python

import os
import struct
import sys
import gzip
import subprocess

version_no=3

class KTestError(Exception):
    pass

class KTest:
    @staticmethod
    def fromFileKTest(f):
        hdr = f.read(5)
        if len(hdr)!=5 or (hdr!='KTEST' and hdr != "BOUT\n"):
            raise KTestError,'unrecognized file'
        version, = struct.unpack('>i', f.read(4))
        if version > version_no:
            raise KTestError,'unrecognized version'
        numArgs, = struct.unpack('>i', f.read(4))
        args = []
        for i in range(numArgs):
            size, = struct.unpack('>i', f.read(4))
            args.append(f.read(size))

        if version >= 2:
            symArgvs, = struct.unpack('>i', f.read(4))
            symArgvLen, = struct.unpack('>i', f.read(4))
        else:
            symArgvs = 0
            symArgvLen = 0

        numObjects, = struct.unpack('>i', f.read(4))
        objects = []
        for i in range(numObjects):
            size, = struct.unpack('>i', f.read(4))
            name = f.read(size)
            size, = struct.unpack('>i', f.read(4))
            bytes = f.read(size)
            objects.append( (name,bytes) )

        # Create an instance
        b = KTest(version, args, symArgvs, symArgvLen, objects)
        return b

    @staticmethod
    def fromFileSMT(f):
        #numArgs, = struct.unpack('>i', f.read(4))
#	stp_f = open('stp.out', 'w')
#	stp = subprocess.call(['stp', '-m'], stdin=f, stdout=subprocess.PIPE, shell=True)
	stp = subprocess.Popen(['stp -m -p'], stdin=f, stdout=subprocess.PIPE, shell=True)
	data = dict()
        for line in stp.stdout:
		chunks=line.split(' ')
		if chunks[0] != 'ASSERT(':
			continue
		var = chunks[1]
		(varname, idx) = chunks[1].split('[')
		idx = int(idx[:-1],16)
		val = int(chunks[3],16)
		if not varname in data:
			data[varname] = dict()
		data[varname][idx] = val

	objects = []
        for name in data.keys():
		byte_list = data[name]
		max_idx = max(byte_list.keys())

		bytes = list('\0'*(max_idx+1))
		for i in byte_list.keys():
			bytes[i] = chr(byte_list[i])
		bytes = ''.join(bytes)
        	objects.append( (name,bytes) )

        # Create an instance
	# fake sym args for now
	(args, symArgvs, symArgvLen) = ([], [], 0)
        b = KTest(2000, args, symArgvs, symArgvLen, objects)
        return b

    @staticmethod
    def fromfile(path):
        if not os.path.exists(path):
            print "ERROR: file %s not found" % (path)
            sys.exit(1)
	print path

	ext = path.split('.')[-1]
        if ext  == 'gz':
		f = gzip.open(path)
		ext = path.split('.')[-2]
		if ext == 'smt':
			# ugh
			f2 = open('tmp.stp', 'w')
			for l in f.readlines():
				f2.write(l)
			f.close()
			f2.close()
			f = open('tmp.stp', 'r')
	else:
	        f = open(path,'rb')

	if ext == 'ktest':
		b = KTest.fromFileKTest(f)
	elif ext == 'smt':
		b = KTest.fromFileSMT(f)
	else:
		print "Could not determine type by extension. Assume bout"
		b = fromFileKTest(f)

        # Augment with extra filename field
        b.filename = path
        return b

    def __init__(self, version, args, symArgvs, symArgvLen, objects):
        self.version = version
        self.symArgvs = symArgvs
        self.symArgvLen = symArgvLen
        self.args = args
        self.objects = objects

        # add a field that represents the name of the program used to
        # generate this .ktest file:
	if len(self.args) > 0:
	        program_full_path = self.args[0]
	else:
		program_full_path = "ANONBIN"

        program_name = os.path.basename(program_full_path)
        # sometimes program names end in .bc, so strip them
        if program_name.endswith('.bc'):
          program_name = program_name[:-3]
        self.programName = program_name

def trimZeros(str):
    for i in range(len(str))[::-1]:
        if str[i] != '\x00':
            return str[:i+1]
    return ''

def printFile(opts, file):
        b = KTest.fromfile(file)
        print 'ktest file : %r' % file
        print 'args       : %r' % b.args
        print 'num objects: %r' % len(b.objects)
        for i,(name,data) in enumerate(b.objects):
            if opts.noTrimZeros:
                str = data
            else:
                str = trimZeros(data)

            print 'object %4d: name: %r' % (i, name)
            print 'object %4d: size: %r' % (i, len(data))
            if opts.writeInts and len(data) == 4:
                print 'object %4d: data: %r' % (i, struct.unpack('i',str)[0])
            else:
                print 'object %4d: data: %r' % (i, str)

def printFiles(opts, args):
	for file in args:
		printFile(opts, file)
		if file != args[-1]:
			print

def dumpFile(opts, file):
	fbase=(file.split('/')[-1:])[0].split('.')[0]
	dirname='kdump-'+fbase
	os.mkdir(dirname)
	b = KTest.fromfile(file)
	print 'ktest file : %r' % file
	print 'args       : %r' % b.args
	print 'num objects: %r' % len(b.objects)
	k = 1
	for i,(name,data) in enumerate(b.objects):
		dat_str = data
		f = open(dirname + '/' + name + '.' + str(k), 'w')
		f.write(dat_str)
		f.close()
		k = k + 1

def dumpData(opts, args):
	for file in args:
		dumpFile(opts, file)

def main(args):
    from optparse import OptionParser
    op = OptionParser("usage: %prog [options] files")
    op.add_option('','--notrim-zeros', dest='noTrimZeros', action='store_true',
                  default=False,
                  help='do not trim trailing zeros')
    op.add_option('','--write-ints', dest='writeInts', action='store_true',
                  default=False,
                  help='convert 4-byte sequences to integers')
    op.add_option('','--dump', dest='dumpData', action='store_true',
        default=False, help='Dump objects to files')

    opts,args = op.parse_args()
    if not args:
        op.error("incorrect number of arguments")

    if opts.dumpData:
        dumpData(opts, args)
        return

    printFiles(opts, args)

if __name__=='__main__':
    main(sys.argv)
