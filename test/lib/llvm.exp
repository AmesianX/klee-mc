# This procedure executes one line of a test case's execution script.
proc execOneLine { test PRS outcome lineno line } {
  set status 0
  set resultmsg ""
  set retval [ catch { eval exec -keepnewline -- $line } errmsg ]

  if { $retval == 0 } {
  	return $resultmsg
  }

  set code [lindex $::errorCode 0]
  set lineno [expr $lineno + 1]
  if { $PRS != ""} {
    set PRS " for $PRS" 
  }

  set errmsg " at line $lineno\nwhile running: $line\n$errmsg"
  switch "$code" {
    CHILDSTATUS {
      set status [lindex $::errorCode 2]
      if { $status != 0 } {
        set resultmsg "$test$PRS\nFailed with exit($status)$errmsg"
      }
    }
    CHILDKILLED {
      set signal [lindex $::errorCode 2]
      set resultmsg "$test$PRS\nFailed with signal($signal)$errmsg"
    }
    CHILDSUSP {
      set signal [lindex $::errorCode 2]
      set resultmsg "$test$PRS\nFailed with suspend($signal)$errmsg"
    }
    POSIX {
      set posixNum [lindex $::errorCode 1]
      set posixMsg [lindex $::errorCode 2]
      set resultmsg "$test$PRS\nFailed with posix($posixNum,$posixMsg)$errmsg"
    }
    NONE {
    }
    default {
    }
  }

  return $resultmsg
}

# performs variable substitutions on the RUN: lines of a test cases.
proc substitute { line test tmpFile } {
  global srcroot objroot srcdir objdir subdir target_triplet prcontext 
  global llvmgcc llvmgxx llvmgcc_version llvmgccmajvers 
  global gccpath gxxpath compile_c compile_cxx link shlibext llvmlibsdir
  global llvmtoolsdir
  global klee kleaver kleereplay
  set path [file join $srcdir $subdir]

  # Substitute all Tcl variables.
  set new_line [subst $line ]

  #replace %prcontext with prcontext.tcl (Must replace before %p)
  regsub -all {%prcontext} $new_line $prcontext new_line
  #replace %llvmgcc with actual path to llvmgcc
  regsub -all {%llvmgcc} $new_line "$llvmgcc -emit-llvm" new_line
  #replace %llvmgxx with actual path to llvmg++
  regsub -all {%llvmgxx} $new_line "$llvmgxx -emit-llvm" new_line
  #replace %compile_c with C compilation command
  regsub -all {%compile_c} $new_line "$compile_c" new_line
  #replace %compile_cxx with C++ compilation command
  regsub -all {%compile_cxx} $new_line "$compile_cxx" new_line
  #replace %link with C++ link command
  regsub -all {%link} $new_line "$link" new_line
  #replace %shlibext with shared library extension
  regsub -all {%shlibext} $new_line "$shlibext" new_line
  #replace %llvmlibsdir with configure library directory
  regsub -all {%llvmlibsdir} $new_line "$llvmlibsdir" new_line
  #replace %klee with klee binary
  regsub -all {%klee} $new_line "klee" new_line
  #replace %kleaver with kleaver binary
  regsub -all {%kleaver} $new_line "kleaver" new_line
  #replace %replay with klee-replay binary
  regsub -all {%replay} $new_line "klee-replay" new_line
  #replace %p with path to source, 
  regsub -all {%p} $new_line [file join $srcdir $subdir] new_line
  #replace %s with filename
  regsub -all {%s} $new_line $test new_line
  #replace %t with temp filenames
  regsub -all {%t} $new_line $tmpFile new_line
  #replace %% with %
  regsub -all {%%} $new_line % new_line
  return $new_line
}

# Open the test file and start reading lines
proc ParseTestFile { test } {
	global srcroot objroot srcdir objdir subdir TEST_FEATURE_LIST target_triplet

	set filename [file tail $test]
	set tmpFile "$filename.tmp"
	set testFileId [ open $test r]
	set numLines 0
	set outcome PASS
	set PRNUMS ""
	set runline ""

	foreach line [split [read $testFileId] \n] {
		# if its the END. line then stop parsing
		# (optimization for big files)
		if {[regexp {END.[ *]$} $line match endofscript]} {
			break
		}

		# if the line is continued, concatenate and continue the loop
		if {[regexp {RUN: *(.+)(\\)$} $line match oneline suffix]} {
			set runline "$runline$oneline "
			continue
		}

		# if its a terminating RUN: line then do substitution
		# on the whole line and then save the line.
		if {[regexp {RUN: *([^&]+)(&&)?} $line match oneline suffix]} {
			set runline "$runline$oneline"
			set runline [ substitute $runline $test $tmpFile ]
			set lines($numLines) $runline
			set numLines [expr $numLines + 1]
			set runline ""
			continue
		}
      
		# if its an PR line, save the problem report number
		if {[regexp {PR([0-9]+)} $line match prnum]} {
			if {$PRNUMS == ""} {
			  set PRNUMS "PR$prnum"
			} else {
				set PRNUMS "$PRNUMS,$prnum"
			}

			continue
		}

		# if its an XFAIL line, see if we should be XFAILing or not.
		if {[regexp {XFAIL:[ *](.+)} $line match features]} {
			set features
			foreach feature [split $features ,] {
				if { [regexp {\*} $feature match] } {
					set outcome XFAIL
				} elseif { [regexp $feature $target_triplet match] } {
					set outcome XFAIL
				} elseif { [regexp $feature $TEST_FEATURE_LIST match] } {
					set outcome XFAIL
				}
			}
			continue
		}
	}

	close $testFileId

	set retArr(LINE) [array get lines]
	set retArr(PR) $PRNUMS
	set retArr(OUTCOME) $outcome
	return [array get retArr]
}

proc RunLLVMTest { test } {
	#Should figure out best way to set the timeout
	#set timeout 40
	array set parseArr [ ParseTestFile $test ]

	array set lines $parseArr(LINE)
	set PRNUMS $parseArr(PR)
	set outcome $parseArr(OUTCOME)
	set numLines [ array size lines ]

	if { $numLines == 0 } {
		fail "$test: \nDoes not have a RUN line\n"
		return
	}

	set failed 0
	for { set i 0 } { $i < $numLines } { set i [ expr $i + 1 ] } {
		regsub ^.*RUN:(.*) $lines($i) \1 theLine
		
		set splitLine [ split $theLine " " ]
		set firstToken [ lindex $splitLine 0 ]
		if { $firstToken == "SETENV" } {
			set envVar [lindex $splitLine 1]
			set envVal [lindex $splitLine 2]
			set envArr($envVar) ::env($envVar)
			set ::env($envVar) $envVal
			continue
		} elseif { $firstToken == "UNSETENV" } {
			set envVar [lindex $splitLine 1]
			set ::env($envVar) $envArr($envVar)
			continue
		}




		set resultmsg [execOneLine $test $PRNUMS $outcome $i $theLine ]
		if { $resultmsg == "" } {
			continue
		}

		if { $outcome == "XFAIL" } {
			xfail "$resultmsg"
		} else {
			fail "$resultmsg"
		}
		set failed 1
		return
	}

	if { $PRNUMS != "" } {
		set PRNUMS " for $PRNUMS"
	}

	if { $outcome == "XFAIL" } {
		xpass "$test$PRNUMS"
	} else {
		pass "$test$PRNUMS"
	}
}

# This procedure runs the set of tests for the test_source_files array.
proc RunLLVMTests { test_source_files } {
	global srcroot objroot srcdir objdir subdir TEST_FEATURE_LIST target_triplet
	set timeout 60

	set path [file join $objdir $subdir]

	#Make Output Directory if it does not exist already
	if { ! [file exists path] } {
		file mkdir $path
	}

	cd $path
  
	file mkdir Output
	cd Output

	foreach test $test_source_files {
		RunLLVMTest $test
	}
}

# Check if klee was configured with POSIX runtime support.
proc klee_supports_posix_runtime { } {
    global ENABLE_POSIX_RUNTIME
    if { $ENABLE_POSIX_RUNTIME == "1" } {
        return 1
    }
    return 0
}

# Check if klee was configured with uclibc support.
proc klee_supports_uclibc { } {
    global ENABLE_UCLIBC
    if { $ENABLE_UCLIBC == "1" } {
        return 1
    }
    return 0
}
